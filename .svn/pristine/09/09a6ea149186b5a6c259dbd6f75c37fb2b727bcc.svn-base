package com.gmm.drp.manager;

import com.gmm.drp.dao.MenuDao;
import com.gmm.drp.dao.UserDao;
import com.gmm.drp.dao.UserLogDao;
import com.gmm.drp.dao.UserRoleDao;
import com.gmm.drp.entity.Menu;
import com.gmm.drp.entity.User;
import com.gmm.drp.entity.UserLog;
import com.gmm.drp.entity.UserRole;
import com.gmm.drp.service.UserService;
import com.gmm.drp.utils.PassUtil;
import com.gmm.drp.utils.ResultUtil;
import com.gmm.drp.vo.MenuVo;
import com.gmm.drp.vo.PageVo;
import com.gmm.drp.vo.R;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Service
public class UserServiceImpl implements UserService {
    @Autowired
    private UserDao uDao;

    @Autowired
    private UserLogDao userLogDao;

    @Autowired
    private UserRoleDao userRoleDao;

    @Autowired
    private MenuDao menuDao;


    @Override
    public R save(User user) {
        user.setPassword(PassUtil.md5(user.getPassword()));
        return ResultUtil.setRes(uDao.insert(user));
    }

    @Override
    public R checkName(String username) {
        User user = uDao.selectByName(username);
        if (user == null){
            //可用
            return ResultUtil.setOK("用户名可用");
        }else {
            return ResultUtil.setERROR("用户名不可用");
        }
    }

    @Override
    public User login(String username, String password) {
        User user = uDao.selectByName(username);
       if(user!=null){
            //校验密码
            if(Objects.equals(user.getPassword(),PassUtil.md5(password))){
                return user;
            }
        }
        return null;
    }

    @Override
    public void saveLog(UserLog userLog) {
        userLogDao.insert(userLog);
    }

    //修改人员角色
    @Override
    public R updateRole(int[] rids, int uid) {
        userRoleDao.deleteByUid(uid);
        for(int rid:rids){
            UserRole userRole=new UserRole();
            userRole.setRoleid(rid);
            userRole.setUserid(uid);
            userRoleDao.insert(userRole);
        }
        return ResultUtil.setOK("修改用户角色成功");
    }

    @Override
    public List<MenuVo> queryMenu(int uid) {
        List<Menu> total=menuDao.selectByMenuUid(uid);
        System.out.println(total);
        List<MenuVo> menuVos=new ArrayList<>();
        for(Menu p:total){
            if(p.getParentid()==-1){
                MenuVo menuVo=new MenuVo();
                menuVo.setParent(p);
                menuVo.setChildrens(new ArrayList<>());
                menuVos.add(menuVo);
            }else{
                //二级菜单
                int index=indexParent(menuVos,p);
                if(index>-1){
                    //找到上级菜单  将当前资源对象添加到对应的孩子中
                    menuVos.get(index).getChildrens().add(p);
                }
            }
        }
        return menuVos;
    }

    @Override
    public List<User> queryAll() {
        return uDao.selectAll();
    }

    @Override
    public PageVo<User> queryByPage(int page, int limit) {
        PageVo<User> pageVo=new PageVo<>();
        pageVo.setData(uDao.selectByPage((page-1)*limit,limit));
        pageVo.setCode(0);
        pageVo.setCount(uDao.selectCount().intValue());
        return  pageVo;
    }

    private int indexParent(List<MenuVo> menuVos, Menu permission){
        for(int i=0;i<menuVos.size();i++){
            if(menuVos.get(i).getParent().getId().intValue()==permission.getParentid().intValue()){
                return i;
            }
        }
        return -1;
    }
}
