package com.gmm.drp.shiro;

import org.apache.shiro.authc.credential.HashedCredentialsMatcher;
import org.apache.shiro.codec.Base64;
import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.CookieRememberMeManager;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.apache.shiro.web.mgt.WebSecurityManager;
import org.apache.shiro.web.servlet.SimpleCookie;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.HashMap;
import java.util.Map;

@Configuration
public class ShiroConfig {


   /* @Bean
    public DefaultSecurityManager createManager(UserRealm userRealm){
        DefaultSecurityManager manager=new DefaultSecurityManager(userRealm);
        return manager;
    }
    @Bean
    public ShiroFilterFactoryBean createFb(DefaultSecurityManager manager){
        ShiroFilterFactoryBean filterFactoryBean=new ShiroFilterFactoryBean();
        filterFactoryBean.setSecurityManager(manager);
        filterFactoryBean.setLoginUrl("login.html");
        filterFactoryBean.setSuccessUrl("index.html");
        filterFactoryBean.setUnauthorizedUrl("error.html");
        Map<String,String> map=new HashMap<>();
        map.put("login.html","anon");
        map.put("userlogin.do","anon");
        map.put("media/**","anon");
        map.put("/**","authc");
        filterFactoryBean.setFilterChainDefinitionMap(map);
        return filterFactoryBean;
    }
    @Bean
    public AuthorizationAttributeSourceAdvisor createAdvisor(DefaultSecurityManager manager){
        AuthorizationAttributeSourceAdvisor advisor=new AuthorizationAttributeSourceAdvisor();
        advisor.setSecurityManager(manager);
        return advisor;
    }*/


    @Bean
    public DefaultWebSecurityManager createManager(UserRealm userRealm){
        DefaultWebSecurityManager manager=new DefaultWebSecurityManager(userRealm);
        return manager;
    }
    @Bean
    public ShiroFilterFactoryBean createFb(WebSecurityManager manager){
        ShiroFilterFactoryBean filterFactoryBean=new ShiroFilterFactoryBean();
        filterFactoryBean.setSecurityManager(manager);
        filterFactoryBean.setLoginUrl("login.html");
        filterFactoryBean.setSuccessUrl("index.html");
        filterFactoryBean.setUnauthorizedUrl("error.html");
        Map<String,String> map=new HashMap<>();
        map.put("/login.html","anon");
        map.put("/register.html","anon");
        map.put("/userlogin.do","anon");
        map.put("/userregister.do","anon");
        map.put("/media/**","anon");
       /* map.put("/media/css/**","anon");
        map.put("/media/font/**","anon");
        map.put("/media/images/**","anon");
        map.put("/media/js/**","anon");*/
        map.put("/**","authc");
        filterFactoryBean.setFilterChainDefinitionMap(map);

        return filterFactoryBean;
    }
    @Bean
    public AuthorizationAttributeSourceAdvisor createAdvisor(DefaultWebSecurityManager manager){
        AuthorizationAttributeSourceAdvisor advisor=new AuthorizationAttributeSourceAdvisor();
        advisor.setSecurityManager(manager);
        return advisor;
    }
    /**
     * 凭证匹配器
     */
    @Bean
    public HashedCredentialsMatcher hashedCredentialsMatcher(){
        HashedCredentialsMatcher hashedCredentialsMatcher = new HashedCredentialsMatcher();
        hashedCredentialsMatcher.setHashAlgorithmName("MD5");
      /*  hashedCredentialsMatcher.setHashIterations(1);*/
        return hashedCredentialsMatcher;
    }
    @Bean
    public CookieRememberMeManager cookieRememberMeManager() {
        CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager();
        SimpleCookie simpleCookie = new SimpleCookie("rememberMe");
        simpleCookie.setMaxAge(259200000);
        cookieRememberMeManager.setCookie(simpleCookie);
        cookieRememberMeManager.setCipherKey(Base64.decode("6ZmI6I2j5Y+R5aSn5ZOlAA=="));
        return cookieRememberMeManager;
    }
}
